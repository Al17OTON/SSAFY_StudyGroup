function solution(n, tops) {
  var answer = 0;
  let a = Array.from({ length: n + 1 }, e => 0)
  let b = Array.from({ length: n + 1 }, e => 0)
  a[0] = 0;
  b[0] = 1;
  for (let k = 1; k <= n; k++) {
    a[k] = (a[k - 1] + b[k - 1]) % 10007
    if (tops[k - 1] == 1) {
      b[k] = (2 * a[k - 1] + 3 * b[k - 1]) % 10007
    } else b[k] = (a[k - 1] + 2 * b[k - 1]) % 10007
  }

  return (a[n] + b[n]) % 10007;
}

/*
dp, 약간 2n타일링 같은
경우의 수=> 마름모를 놓을 수 있는 경우의 수
윗변 n , 아랫변 n+1 , 총 삼각형 개수 2n+1 + tops
왼쪽부터 마름모로 채우는 경우,,

a[k] = k번째 아래 방향 정삼각형까지 덮되, k번째 아래 방향 정삼각형을 덮는 방법이 3번 방법인 경우의 수
b[k] = k번째 아래 방향 정삼각형까지 덮되, k번째 아래 방향 정삼각형을 덮는 방법이 3번 방법이 아닌 경우의 수

1.위쪽 정삼각형과 함께 마름모 타일로 덮기
2.왼쪽 정삼각형과 함께 마름모 타일로 덮기
3.오른쪽 정삼각형과 함께 마름모 타일로 덮기
4.정삼각형 타일로 덮기

top이 있는 경우
a[k]= k-1번재 아래 방향 정삼각형을 덮는 방법이 오른쪽을 덮는 경우
  = a[k-1]+b[k-1]
b[k]=2*a[k-1]+3*b[k-1]
  (1,4번)      1,2,4
  
top이 없는 경우
b[k]=a[k-1]+2*b[k-1]
*/